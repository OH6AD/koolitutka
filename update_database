#!/usr/bin/env php
<?php

error_reporting(E_ALL);
require_once(__DIR__.'/lib/git_diff.php');

// Parse config
$config = parse_ini_file(__DIR__.'/config.ini', TRUE);
if ($config === FALSE) {
    print("No configuration file found\n");
    exit(1);
}
$config = (object)$config;
$config->git = (object)$config->git;
$file = 'oh-callsigns.tsv';

// Check if we need to create a database
$init_db = !file_exists($config->database);

// Connect database
$db = new SQLite3($config->database);
$db->busyTimeout(2000);
$db->exec('PRAGMA journal_mode = wal');

// Initialize database if needed
if ($init_db) {
    print("Creating database... ");
    $db->exec(file_get_contents(__DIR__.'/lib/schema.sql'));
    print("OK\n");
}

// Executes given database query. Terminates in case of a database
// error. When $error === NULL then errors are passed though to
// caller.
function db_execute(&$stmt, $values = [], $error = "Database error") {
    global $db;

    // Prepare statement for reuse
    $stmt->reset();
    
    // Bind values
    foreach ($values as $k=>$v) {
        // Numeric indices start from 1, increment needed
        if (!is_string($k)) $k++;
        $stmt->bindValue($k, $v);
    }

    // Execute and check result
    $ret = $stmt->execute();
    if ($error !== NULL && $ret === FALSE) err($error);
    return $ret;
}

$select_from_commit = $db->prepare('SELECT hash,authored FROM updates ORDER BY rowid DESC LIMIT 1');
$insert_end_commit = $db->prepare('INSERT INTO updates VALUES (?,?)');
$update_event = $db->prepare('UPDATE event SET to_date=:date WHERE callsign=:callsign AND status=:status AND to_date=:prev_date');
$insert_event = $db->prepare('INSERT INTO event VALUES (:callsign,:status,:date,:date)');

$from_result = db_execute($select_from_commit)->fetchArray();
if ($from_result === FALSE) {
    $range = $config->git->branch;
    $prev_date = '';
} else {
    $range = $from_result['hash'].'..'.$config->git->branch;
    $prev_date = $from_result['authored'];
}

// Update git
if ($config->git->fetch) git_raw('git fetch', $config->git->repo);

if($prev_date !== '') printf("Resuming from $prev_date.\n");

// Iterating through commits
$commits = git_log($config->git->repo, $range, $file);
while (TRUE) {
    $match = parse_line($commits->pipe, '/^([^ ]*) (.*)/');
    if ($match === FALSE) break; // All commits processed
    if (is_string($match)) {
        print("Unable to parse version history line $match\n");
        exit(1);
    }

    // Get hash and use the previous day as the date. The ministry
    // updates the database the next morning (e.g. Friday data arrives
    // on Saturday morning.
    $hash = $match[1];
    $ts = intval($match[2])-86400;
    $date = strftime('%F', $ts);

    printf("Processing $date... ");

    // Collect call signs in that commit
    $callsigns = open_koolit($config->git->repo, $hash);
    $table = [];
    $mangles = 0;
    $duplicates = 0;
    while (TRUE) {
        $match = parse_line_hotfix($callsigns->pipe,'/^([^\t]*)\t([^\t]*)/');
        if ($match === FALSE) break; // All callsigns processed in a commit
        if (is_string($match)) {
            print("Unable to match callsign $match in $hash\n");
            exit(2);
        }

        // Many callsigns have duplicates in the daily list. For that
        // reason we populate the list first, having precedence on
        // call signs which are in VOIMASSA state.
        $callsign = $match[1];
        $state_a = @$table[$callsign];
        $state_b = $match[2];
        if ($state_a === "VOIMASSA" || $state_b === "VOIMAS" || $state_b === "VOIMASSA") {
            // Voimassa (in effect) is the strongest state). Also, the
            // ministry changed "VOIMAS" to "VOIMASSA" in 2019-12-14,
            // this also harmonizes it.
            $table[$callsign] = "VOIMASSA";
        } else if ($state_a === NULL) {
            // This is a normal case. Taking the new value.
            $table[$callsign] = $state_b;
        } else {
            // If we hit here, the script needs to be expanded to
            // handle such state transformation.
            print("Unhandled duplicate state in $hash callsign $callsign: $state_a -> $state_b\n");
            exit(3);
        }

        // For statistics
        if ($state_a !== NULL) $duplicates++;
        if (array_key_exists('mangled', $match)) $mangles++;
    }
    close_git($callsigns);

    // Now we have a cleaner data and we're ready populate the database
    $db->exec('BEGIN');
    foreach ($table as $callsign => $status) {
        $info = [
            'prev_date' => $prev_date,
            'date' => $date,
            'callsign' => $callsign,
            'status' => $status,
        ];

        // Trying to update callsign if it succeeds
        db_execute($update_event, $info);
        switch ($db->changes()) {
        case 0: // Callsign state was changed
            db_execute($insert_event, $info);
            break;
        case 1: // No change on callsign, just extended for this date
            break;
        default: // Schlecht!
            print("Bad state change in commit $hash\n");
            print_r($info);
            exit(3);
        }
    }

    // Processing of a commit is ready. Updating commit pointer and
    // finishing transaction!
    db_execute($insert_end_commit, [$hash, $date]);
    $db->exec('END');

    print("OK".($mangles === 0 ? '' : ", mangles: $mangles").($duplicates === 0 ? '' : ", duplicates: $duplicates")."\n");

    $prev_date = $date;
}

close_git($commits);
printf("Complete!\n");

// Fixes some problems Traficom and its predecessor Ficora had in
// their data.
function parse_line_hotfix($p, $r) {
    $ret = parse_line($p, $r);
    if (is_string($ret)) {
        // Between 2016-08-03 and 2017-03-03 call sign OH2EYY had
        // extra newline. Also, between 2019-04-09 and 2019-12-14 call
        // sign OG73WR had similar problem.  This hotfix handles it.
        $head = rtrim($ret, "\n\r");
        $out = parse_line($p, $r, $head);
        if (is_array($out)) {
            $out['mangled'] = TRUE;
        }
        return $out;
    } else {
        return $ret;
    }
}
